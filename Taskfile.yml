version: "3"

tasks:
  build:
    desc: Builds the app into a binary.
    cmds:
      - go build main.go

  lint:
    desc: Runs the linter.
    cmds:
      - golangci-lint run --fix ./...

  docker:build:
    desc: Build the Docker image
    env:
      LOCAL_IMAGE: banterbus
      FLAKE_TARGET: container
    cmds:
      - nix build .#${FLAKE_TARGET}
      - docker load < result

  docker:publish:
    desc: Publishes the Docker image
    cmds:
      - task: docker:build
      - |
        if [ "${IMMUTABLE}" = "true" ]; then
          echo "Checking if image ${IMAGE} already exists..."
          if docker manifest inspect ${IMAGE} > /dev/null 2>&1; then
            echo "Image ${IMAGE} already exists and IMMUTABLE=true, skipping push"
            exit 0
          fi
        fi
        docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
        docker image tag ${LOCAL_IMAGE}:latest ${IMAGE}
        docker push ${IMAGE}

  format:
    desc: Runs the formatter.
    cmds:
      - golangci-lint run --fix ./...
      - sqlfluff format db/ --dialect sqlite --disable-progress-bar

  generate:
    desc: Generates code from SQL schema.
    cmds:
      - sqlc generate
      - gomod2nix
      - task: format

  tests:unit:
    desc: Runs all the unit tests.
    cmds:
      - go test -v -short ./...

  tests:integration:
    desc: Runs all the integration tests.
    cmds:
      - go test -run ^TestIntegration -v ./...

  tests:
    desc: Runs all the tests.
    cmds:
      - go test -run ./...

  coverage:
    desc: Run the integration tests and gets the code coverage
    cmds:
      - go test -covermode count -coverprofile=coverage.txt -v ./... | tee output.txt
      - cat output.txt | go-junit-report -set-exit-code > report.xml
      - gocover-cobertura < coverage.txt > coverage.xml

  release:
    desc: Release the CLI tool.
    cmds:
      - goreleaser release --clean --verbose
