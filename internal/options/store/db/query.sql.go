// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addOption = `-- name: AddOption :one
INSERT INTO options (name, description, type, default_value, example) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at, name, description, type, default_value, example
`

type AddOptionParams struct {
	Name         string
	Description  string
	Type         string
	DefaultValue string
	Example      string
}

func (q *Queries) AddOption(ctx context.Context, arg AddOptionParams) (Option, error) {
	row := q.db.QueryRowContext(ctx, addOption,
		arg.Name,
		arg.Description,
		arg.Type,
		arg.DefaultValue,
		arg.Example,
	)
	var i Option
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Type,
		&i.DefaultValue,
		&i.Example,
	)
	return i, err
}

const addSource = `-- name: AddSource :one
INSERT INTO sources (url) VALUES (?) RETURNING id, created_at, updated_at, url
`

func (q *Queries) AddSource(ctx context.Context, url string) (Source, error) {
	row := q.db.QueryRowContext(ctx, addSource, url)
	var i Source
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
	)
	return i, err
}

const addSourceOption = `-- name: AddSourceOption :one
INSERT INTO source_options (source_id, option_id) VALUES (?, ?) RETURNING source_id, option_id, created_at, updated_at
`

type AddSourceOptionParams struct {
	SourceID int64
	OptionID int64
}

func (q *Queries) AddSourceOption(ctx context.Context, arg AddSourceOptionParams) (SourceOption, error) {
	row := q.db.QueryRowContext(ctx, addSourceOption, arg.SourceID, arg.OptionID)
	var i SourceOption
	err := row.Scan(
		&i.SourceID,
		&i.OptionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOptions = `-- name: FindOptions :many
SELECT
    options.id,
    options.name,
    options.description,
    options.type,
    options.default_value,
    options.example,
    GROUP_CONCAT(sources.url) AS source_list
FROM
    options
LEFT JOIN
    source_options ON options.id = source_options.option_id
LEFT JOIN
    sources ON source_options.source_id = sources.id
WHERE
	name LIKE ?
GROUP BY
    options.id
LIMIT
	10
`

type FindOptionsRow struct {
	ID           int64
	Name         string
	Description  string
	Type         string
	DefaultValue string
	Example      string
	SourceList   string
}

func (q *Queries) FindOptions(ctx context.Context, name string) ([]FindOptionsRow, error) {
	rows, err := q.db.QueryContext(ctx, findOptions, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindOptionsRow
	for rows.Next() {
		var i FindOptionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Type,
			&i.DefaultValue,
			&i.Example,
			&i.SourceList,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastUpdated = `-- name: GetLastUpdated :one
SELECT
    options.updated_at
FROM
    options
ORDER BY 
    options.updated_at DESC
LIMIT
	1
`

func (q *Queries) GetLastUpdated(ctx context.Context) (sql.NullTime, error) {
	row := q.db.QueryRowContext(ctx, getLastUpdated)
	var updated_at sql.NullTime
	err := row.Scan(&updated_at)
	return updated_at, err
}
